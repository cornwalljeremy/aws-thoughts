{"version":3,"sources":["components/Header/index.js","components/Footer/index.js","components/ThoughtList/index.js","components/ThoughtForm/index.js","pages/Home.js","pages/NoMatch.js","pages/Profile.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","style","fontWeight","Footer","ThoughtList","thoughts","title","length","map","thought","username","Date","parseInt","createdAt","toString","image","src","alt","ThoughtForm","useState","formState","setFormState","characterCount","setCharacterCount","fileInput","useRef","setImageData","objectURL","a","handleImageUpload","event","getUploadUrl","fetch","res","json","preventDefault","file","current","files","uploadURL","publicURL","console","error","setRes","method","body","result","log","handleChange","target","value","name","onSubmit","headers","Accept","JSON","stringify","postData","placeholder","onChange","type","ref","onClick","Home","isLoaded","setIsLoaded","setThoughts","useEffect","data","fetchData","NoMatch","Profile","props","userParam","useParams","App","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.67576307.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Header = () => {\n  return (\n    <header className=\"bg-secondary mb-4 py-2 flex-row align-center\">\n      <div className=\"container flex-row justify-space-between-lg justify-center align-center\">\n        <Link\n          to={`/`}\n          style={{ fontWeight: 700 }}\n          className=\"text-light\"\n        >\n          <h1>Deep Thoughts</h1>\n        </Link>{' '}\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\n\nconst Footer = () => {\n  return (\n    <footer className=\"w-100 mt-auto bg-secondary p-4\">\n      <div className=\"container\">&copy;2021 by Lernantino</div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// Renders the list of thoughts\nconst ThoughtList = ({ thoughts, title }) => {\n  if (!thoughts.length) {\n    return <h3>No Thoughts Yet</h3>;\n  }\n  return (\n    <div>\n      <h3>{title}</h3>\n      {thoughts &&\n        thoughts.map((thought) => (\n          <div key={thought.createdAt} className='card mb-3'>\n            <p className='card-header'>\n              <Link\n                to={`/profile/${thought.username}`}\n                style={{ fontWeight: 700 }}\n                className='text-light'\n              >\n                {thought.username}'s thought on{\" \"}\n                {new Date(parseInt(thought.createdAt)).toString()}\n              </Link>{\" \"}\n            </p>\n            {thought.thought && <p className='px-2 mt-2'>{thought.thought}</p>}\n            {/* add the thought image */}\n            {thought.image && (\n              <p className='px-2'>\n                <img\n                  className='mt-3 ml-4 thought-image'\n                  src={thought.image}\n                  alt='S3 bucket response'\n                />\n              </p>\n            )}\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default ThoughtList;\n","import React, { useState, useRef } from \"react\";\n\nconst ThoughtForm = () => {\n  const [formState, setFormState] = useState({\n    username: \"\",\n    thought: \"\",\n    image: \"\",\n  });\n  const [characterCount, setCharacterCount] = useState(0);\n  const fileInput = useRef(null);\n\n  const setImageData = async (objectURL) => {\n    return await setFormState({ ...formState, image: objectURL });\n  };\n  // uploads image to the S3 bucket\n  // uploads image to the S3 bucket\n  const handleImageUpload = async (event) => {\n    const getUploadUrl = async () => {\n      const res = await fetch(\n        \"https://g2iyl7jbgb.execute-api.us-east-2.amazonaws.com/Prod/api/pre-url\"\n      );\n\n      return res.json();\n    };\n    event.preventDefault();\n    const file = fileInput.current.files[0];\n    // retrieve the URL and file name\n    try {\n      var { uploadURL, publicURL } = await getUploadUrl();\n    } catch (err) {\n      console.error(err);\n    }\n    const setRes = await setImageData(publicURL);\n\n    try {\n      var result = await fetch(uploadURL, {\n        method: \"PUT\",\n        body: file,\n      });\n      console.log(\"result: \", result);\n    } catch (err) {\n      console.error(err);\n    }\n\n    if (setRes) {\n      console.log(\"publicURL: \", publicURL);\n      console.log(\"formState: \", formState);\n    }\n\n    return formState;\n  };\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    if (event.target.value.length <= 280) {\n      setFormState({ ...formState, [event.target.name]: event.target.value });\n      setCharacterCount(event.target.value.length);\n    }\n  };\n\n  // Invoked when Submit button is clicked\n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n\n    const postData = async () => {\n      const res = await fetch(\"/api/users\", {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n       \n        body: JSON.stringify(formState),\n      });\n      console.log(res.json)\n      console.log(\"Submit: \", formState);\n      const data = await res.json();\n    };\n\n    postData();\n\n    // clear form value\n    setFormState({ username: \"\", thought: \"\", image: \"\" });\n    setCharacterCount(0);\n  };\n\n  return (\n    <div>\n      <p className={`m-0 ${characterCount === 280 ? \"text-error\" : \"\"}`}>\n        Character Count: {characterCount}/280\n      </p>\n      <form\n        className='flex-row justify-center justify-space-between-md align-stretch'\n        onSubmit={handleFormSubmit}\n      >\n        <input\n          placeholder='Name'\n          name='username'\n          value={formState.username}\n          className='form-input col-12 '\n          onChange={handleChange}\n        ></input>\n        <textarea\n          placeholder=\"Here's a new thought...\"\n          name='thought'\n          value={formState.thought}\n          className='form-input col-12 '\n          onChange={handleChange}\n        ></textarea>\n        <label className='form-input col-12  p-1'>\n          Add an image to your thought:\n          <input type='file' ref={fileInput} className='form-input p-2 ' />\n          <button className='btn ' onClick={handleImageUpload} type='submit'>\n            Upload\n          </button>\n        </label>\n\n        <button className='btn col-12 ' type='submit'>\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default ThoughtForm;\n","import React, { useState, useEffect } from \"react\";\nimport ThoughtList from \"../components/ThoughtList\";\nimport ThoughtForm from \"../components/ThoughtForm\";\n\nconst Home = () => {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [thoughts, setThoughts] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const res = await fetch(\n        \"https://g2iyl7jbgb.execute-api.us-east-2.amazonaws.com/Prod/api/users/\"\n      );\n      const data = await res.json();\n\n      setThoughts([...data]);\n      setIsLoaded(true);\n    };\n    fetchData();\n  }, []);\n\n  useEffect(() => {}, [thoughts]);\n\n  return (\n    <main>\n      <div className='flex-row justify-space-between'>\n        <div className='col-12 mb-3'>\n          <ThoughtForm />\n        </div>\n        <div className={`col-12 mb-3 `}>\n          {!isLoaded ? (\n            <div>Loading...</div>\n          ) : (\n            <ThoughtList\n              thoughts={thoughts}\n              setThoughts={setThoughts}\n              title='Some Feed for Thought(s)...'\n            />\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default Home;\n","import React from 'react';\n\nconst NoMatch = () => {\n  return (\n    <div>\n      Oops, we couldn't find that page.\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport ThoughtList from '../components/ThoughtList';\n\nconst Profile = props => {\n  const { username: userParam } = useParams();\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [thoughts, setThoughts] = useState([{\n    username: userParam,\n    createdAt: '', \n    thought: '',\n    image: ''\n  }]);\n\n  // retrieve thoughts from the user on component mount\n  useEffect(() => {\n    const fetchData = async () => {\n      const res = await fetch(`/api/users/${userParam}`);\n      \n      const data = await res.json();\n\n      setThoughts(data);\n      setIsLoaded(true);\n      console.log(\"thoughts: \", thoughts);\n      console.log(\"data: \", data);  \n    };\n    fetchData();\n  }, [userParam]); // warning if dependency not tracked by useEffect\n\n  return (\n    <div>\n      <div className=\"flex-row mb-3\">\n        <h2 className=\"bg-dark text-secondary p-3 display-inline-block\">\n          Viewing {userParam ? `${userParam}'s` : 'your'} profile.\n        </h2>\n      </div>\n\n      <div className=\"flex-row justify-space-between mb-3\">\n        <div className=\"col-12 mb-3 col-lg-9\">\n        {!isLoaded ? (\n            <div>Loading...</div>\n          ) : (\n          <ThoughtList thoughts={thoughts} title={`${userParam}'s thoughts...`} />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Profile;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Home from './pages/Home';\nimport NoMatch from './pages/NoMatch';\nimport Profile from './pages/Profile';\n\nfunction App() {\n  return (\n    <Router>\n    <div className=\"flex-column justify-flex-start min-100-vh\">\n      <Header />\n      <div className=\"container\">\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/profile/:username\" component={Profile} />\n          <Route component={NoMatch} />\n        </Switch>\n      </div>\n      <Footer />\n    </div>\n  </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}